{"version":3,"sources":["atoms.ts","Components/CreateDraggable.tsx","Components/Board.tsx","App.tsx","index.tsx","theme.ts"],"names":["USERTODOLIST_KEY","userGetTodo","localStorage","getItem","parseTodo","JSON","parse","toDoState","atom","key","default","Card","styled","div","props","isDragging","theme","cardColor","CreateDraggable","toDoId","toDoText","index","draggableId","magic","snapshot","ref","innerRef","dragHandleProps","draggableProps","React","memo","Wrapper","boardColor","Title","Form","form","TitleDiv","Button","button","Area","isDraggingOver","draggingFromThisWith","Input","input","Board","toDos","boardId","boardIndex","useForm","register","setValue","handleSubmit","toDosa","useRecoilValue","SetToDos","useSetRecoilState","onClick","event","allboards","newBoards","onVaild","toDo","newToDos","id","Date","now","text","allBoards","onFocusClick","setTimeout","target","blur","setItem","stringify","className","onSubmit","onFocus","required","placeholder","type","droppableId","Boolean","droppableProps","map","Boards","App","useRecoilState","setToDos","Helmet","src","crossOrigin","board","newBoard","maxLength","onDragEnd","info","console","log","destination","source","splice","taskObj","removeBoard","sourceKey","destKey","keyList","Object","keys","forEach","item","direction","queryClient","QueryClient","GlobalStyle","createGlobalStyle","bgColor","ReactDOM","render","StrictMode","client","document","getElementById"],"mappings":"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","file":"static/js/main.3dd6e77c.chunk.js","sourcesContent":["import { atom } from \"recoil\";\n\nexport interface ItoDoStateProps {\n  [key: string]: IToDoProps[];\n}\n\nexport interface IToDoProps {\n  id: number;\n  text: string;\n}\n\nexport const USERTODOLIST_KEY = \"todos\";\nconst userGetTodo = localStorage.getItem(USERTODOLIST_KEY);\nconst parseTodo = JSON.parse(userGetTodo as string);\n\nexport const toDoState = atom<ItoDoStateProps>({\n  key: \"toDos\",\n  default: userGetTodo !== null ? parseTodo : {},\n});\n","import React from \"react\";\nimport { Draggable } from \"react-beautiful-dnd\";\nimport styled from \"styled-components\";\n\ninterface ISnapshot {\n  isDragging: boolean;\n}\n\nconst Card = styled.div<ISnapshot>`\n  padding: 10px;\n  border-radius: 5px;\n  margin-bottom: 5px;\n  background-color: ${(props) =>\n    props.isDragging ? \"#AEE1E1\" : props.theme.cardColor};\n  box-shadow: ${(props) =>\n    props.isDragging ? \"0px 2px 5px rgba(0,0,0,0.5)\" : \"none\"};\n`;\n\ninterface IDraggableProps {\n  toDoId: number;\n  toDoText: string;\n  index: number;\n}\n\nfunction CreateDraggable({ toDoId, toDoText, index }: IDraggableProps) {\n  //console.log(toDo, \"has been rendered\");\n  return (\n    <Draggable draggableId={toDoId + \"\"} index={index}>\n      {(magic, snapshot) => (\n        <Card\n          isDragging={snapshot.isDragging}\n          ref={magic.innerRef}\n          {...magic.dragHandleProps}\n          {...magic.draggableProps}\n        >\n          {toDoText}\n        </Card>\n      )}\n    </Draggable>\n  );\n}\n\nexport default React.memo(CreateDraggable);\n","import React from \"react\";\nimport { Draggable, Droppable } from \"react-beautiful-dnd\";\nimport { useForm } from \"react-hook-form\";\nimport { useRecoilValue, useSetRecoilState } from \"recoil\";\nimport styled from \"styled-components\";\nimport { IToDoProps, toDoState, USERTODOLIST_KEY } from \"../atoms\";\nimport CreateDraggable from \"./CreateDraggable\";\n\nconst Wrapper = styled.div<{ isDragging: boolean }>`\n  padding: 10px 0px;\n  background-color: ${(props) =>\n    props.isDragging ? \"#FCD1D1\" : props.theme.boardColor};\n  width: 300px;\n  border-radius: 5px;\n  min-height: 300px;\n  display: flex;\n  flex-direction: column;\n  transform: none;\n  flex-grow: 1;\n`;\n\nconst Title = styled.div`\n  text-align: center;\n  font-weight: 600;\n  font-size: 18px;\n`;\n\ninterface IAreaProps {\n  isDraggingOver: boolean;\n  draggingFromThisWith: boolean;\n}\n\nconst Form = styled.form`\n  width: 100%;\n  input {\n    width: 100%;\n  }\n`;\n\nconst TitleDiv = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 10px;\n  padding: 0px 10px;\n`;\n\nconst Button = styled.button`\n  border: none;\n  background-color: ${(props) => props.theme.boardColor};\n  color: black;\n  padding: 0;\n  font-size: 28px;\n  position: relative;\n  i {\n    border: none;\n    background-color: none;\n    padding: none;\n    &:hover {\n      color: #f783ac;\n    }\n  }\n`;\n\nconst Area = styled.div<IAreaProps>`\n  background-color: ${(props) =>\n    props.isDraggingOver\n      ? \"#FCD1D1\"\n      : props.draggingFromThisWith\n      ? \"#D3E0DC\"\n      : \"#ECE2E1\"};\n  flex-grow: 1;\n  transition: background-color 0.3s ease-in-out;\n  padding: 20px;\n`;\n\nconst Input = styled.input`\n  text-align: center;\n`;\n\ninterface IBoardProps {\n  toDos: IToDoProps[];\n  boardId: string;\n  boardIndex: number;\n}\n\ninterface IFormProps {\n  toDo: string;\n}\n\nfunction Board({ toDos, boardId, boardIndex }: IBoardProps) {\n  const { register, setValue, handleSubmit } = useForm<IFormProps>();\n  const toDosa = useRecoilValue(toDoState);\n  const SetToDos = useSetRecoilState(toDoState);\n  const onClick = (event: React.FormEvent<HTMLButtonElement>) => {\n    //console.log(event);\n    //console.log(toDos);\n    //console.log(boardId);\n    //console.log(toDosa);\n    SetToDos((allboards) => {\n      const newBoards = { ...allboards };\n      delete newBoards[boardId];\n      //console.log(boardId.toString());\n      //console.log(newBoards);\n      return newBoards;\n    });\n  };\n  const onVaild = ({ toDo }: IFormProps) => {\n    //console.log(toDo);\n    const newToDos = { id: Date.now(), text: toDo };\n    SetToDos((allBoards) => {\n      return { ...allBoards, [boardId]: [newToDos, ...allBoards[boardId]] };\n    });\n    setValue(\"toDo\", \"\");\n  };\n  const onFocusClick = (event: React.FocusEvent<HTMLInputElement>) => {\n    setTimeout(() => {\n      event.target.blur();\n    }, 3000);\n  };\n\n  localStorage.setItem(USERTODOLIST_KEY, JSON.stringify(toDosa));\n  //console.log(JSON.parse(\"asdf\"));\n  return (\n    <Draggable draggableId={boardId} index={boardIndex}>\n      {(magic, snapshot) => (\n        <Wrapper\n          isDragging={snapshot.isDragging}\n          ref={magic.innerRef}\n          {...magic.draggableProps}\n        >\n          <TitleDiv {...magic.dragHandleProps}>\n            <div></div>\n            <Title>{boardId}</Title>\n            <Button onClick={onClick}>\n              <i className=\"fas fa-times-circle\"></i>\n            </Button>\n          </TitleDiv>\n          <Form onSubmit={handleSubmit(onVaild)}>\n            <Input\n              onFocus={onFocusClick}\n              {...register(\"toDo\", { required: true })}\n              placeholder={`Add task a ${boardId}`}\n              type=\"text\"\n            />\n          </Form>\n          <Droppable droppableId={boardId}>\n            {(magic, snapshot) => (\n              <Area\n                isDraggingOver={snapshot.isDraggingOver}\n                draggingFromThisWith={Boolean(snapshot.draggingFromThisWith)}\n                ref={magic.innerRef}\n                {...magic.droppableProps}\n              >\n                {toDos.map((toDo, index) => (\n                  <CreateDraggable\n                    index={index}\n                    toDoId={toDo.id}\n                    key={toDo.id}\n                    toDoText={toDo.text}\n                  />\n                ))}\n                {magic.placeholder}\n              </Area>\n            )}\n          </Droppable>\n        </Wrapper>\n      )}\n    </Draggable>\n  );\n}\n\nexport default React.memo(Board);\n","import React from \"react\";\nimport { DragDropContext, Droppable, DropResult } from \"react-beautiful-dnd\";\nimport { Helmet } from \"react-helmet\";\nimport { useForm } from \"react-hook-form\";\nimport { useRecoilState } from \"recoil\";\nimport styled from \"styled-components\";\nimport { ItoDoStateProps, toDoState, USERTODOLIST_KEY } from \"./atoms\";\nimport Board from \"./Components/Board\";\n\nconst Wrapper = styled.div`\n  display: flex;\n  margin: 0 auto;\n  max-width: 700px;\n  width: 100%;\n  justify-content: center;\n  align-items: flex-start;\n  height: 100vh;\n  flex-wrap: wrap;\n`;\n\nconst Boards = styled.div`\n  display: grid;\n  grid-template-columns: repeat(4, 1fr);\n  grid-auto-rows: minmax(250px, 1fr);\n  place-content: center center;\n  gap: 10px;\n  width: 100%;\n`;\n\nconst Form = styled.form`\n  max-width: 300px;\n  display: flex;\n  flex-direction: column;\n  background-color: ${(props) => props.theme.boardColor};\n  padding: 20px 10px;\n  margin-left: 20px;\n  margin-top: 20px;\n  border-radius: 20px;\n  box-shadow: 2px 5px 5px rgba(0, 0, 0, 0.3);\n`;\n\nconst Input = styled.input`\n  text-align: center;\n`;\n\nconst Button = styled.button``;\n\nfunction App() {\n  const [toDos, setToDos] = useRecoilState(toDoState);\n  const { register, handleSubmit, setValue } = useForm();\n  const onDragEnd = (info: DropResult) => {\n    console.log(info);\n    const { type, destination, source } = info;\n\n    if (destination === null && type !== \"board\") {\n      setToDos((allBoards) => {\n        const newBoard = [...allBoards[source.droppableId]];\n        newBoard.splice(source.index, 1);\n        return { ...allBoards, [source.droppableId]: newBoard };\n      });\n    }\n\n    if (!destination) return;\n    //console.log(toDos);\n\n    if (type === \"board\") {\n      if (destination.index === source.index) return;\n      setToDos((allBoards) => {\n        const keyList = Object.keys(toDos);\n        //console.log(allBoards);\n        const newBoards: ItoDoStateProps = {};\n        //console.log(keyList);\n        // keyList.map((item) => {\n        //   console.log(item);\n        //   newBoards[item] = { ...allBoards[item] };\n        // });\n        let sourceKey: string, destKey: string;\n        keyList.forEach((item, index) => {\n          if (index === source.index) sourceKey = item;\n          if (index === destination.index) destKey = item;\n        });\n\n        keyList.forEach((item) => {\n          if (item === sourceKey) return;\n          if (item === destKey && source.index > destination.index) {\n            newBoards[sourceKey] = [...allBoards[sourceKey]];\n          }\n          newBoards[item] = [...allBoards[item]];\n          if (item === destKey && source.index < destination.index) {\n            newBoards[sourceKey] = [...allBoards[sourceKey]];\n          }\n        });\n        //console.log(newBoards);\n        // // keyList.forEach((item) => {\n        // //   //console.log(item);\n        // //   if (item === sourceKey) {\n        // //     newToDos[destKey] = [...allBoards[destKey]];\n        // //     newToDosArr.push((newToDos[destKey] = [...allBoards[destKey]]));\n        // //   } else if (item === destKey) {\n        // //     newToDos[sourceKey] = [...allBoards[sourceKey]];\n        // //     newToDosArr.push((newToDos[sourceKey] = [...allBoards[sourceKey]]));\n        // //   } else {\n        // //     newToDos[item] = [...allBoards[item]];\n        // //     newToDosArr.push((newToDos[item] = [...allBoards[item]]));\n        // //   }\n        // //   console.log({ ...newToDosArr });\n        // //   //console.log(newToDos);\n        // // });\n        return newBoards;\n      });\n      return;\n    }\n\n    if (\n      destination?.droppableId === source.droppableId &&\n      source.droppableId !== \"droppableBoards\"\n    ) {\n      setToDos((allBoards) => {\n        const newBoard = [...allBoards[source.droppableId]];\n        //console.log(newBoard);\n        const taskObj = newBoard[source.index];\n        //console.log(taskObj);\n        newBoard.splice(source.index, 1);\n        newBoard.splice(destination?.index, 0, taskObj);\n        //console.log(newBoard);\n        return { ...allBoards, [source.droppableId]: newBoard };\n      });\n    }\n\n    if (destination?.droppableId !== source.droppableId) {\n      setToDos((allBoards) => {\n        const newBoard = [...allBoards[destination.droppableId]];\n        const removeBoard = [...allBoards[source.droppableId]];\n        const taskObj = removeBoard[source.index];\n        removeBoard.splice(source.index, 1);\n        newBoard.splice(destination.index, 0, taskObj);\n        //console.log(removeBoard);\n        //console.log(toDos);\n\n        return {\n          ...allBoards,\n          [source.droppableId]: removeBoard,\n          [destination.droppableId]: newBoard,\n        };\n      });\n    }\n  };\n\n  interface IAddBoard {\n    board: string;\n  }\n\n  const onVaild = ({ board }: IAddBoard) => {\n    //console.log(board);\n    const newBoard = { [board]: [] };\n    //console.log(newBoard);\n    setToDos((allBoards) => {\n      return { ...allBoards, ...newBoard };\n    });\n    //console.log(localStorage.getItem(USERTODOLIST_KEY));\n    setValue(\"board\", \"\");\n  };\n\n  const onFocusClick = (event: React.FocusEvent<HTMLInputElement>) => {\n    setTimeout(() => {\n      event.target.blur();\n    }, 3000);\n  };\n  localStorage.setItem(USERTODOLIST_KEY, JSON.stringify(toDos));\n  return (\n    <>\n      <Helmet>\n        <script\n          src=\"https://kit.fontawesome.com/5951a7bf3c.js\"\n          crossOrigin=\"anonymous\"\n        ></script>\n      </Helmet>\n      <Form onSubmit={handleSubmit<IAddBoard>(onVaild)}>\n        <Input\n          {...register(\"board\", {\n            required: true,\n            maxLength: 20,\n          })}\n          type=\"text\"\n          placeholder=\"Add a Board\"\n          maxLength={20}\n          onFocus={onFocusClick}\n        />\n        <Button>Add Board</Button>\n      </Form>\n      <DragDropContext onDragEnd={onDragEnd}>\n        <Wrapper>\n          <Droppable\n            droppableId=\"droppableBoards\"\n            type=\"board\"\n            direction=\"horizontal\"\n          >\n            {(magic) => (\n              <Boards ref={magic.innerRef} {...magic.droppableProps}>\n                {Object.keys(toDos).map((boardId, index) => (\n                  <Board\n                    key={boardId}\n                    boardId={boardId}\n                    toDos={toDos[boardId]}\n                    boardIndex={index}\n                  />\n                ))}\n                {magic.placeholder}\n              </Boards>\n            )}\n          </Droppable>\n        </Wrapper>\n      </DragDropContext>\n    </>\n  );\n}\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { QueryClient, QueryClientProvider } from \"react-query\";\nimport { RecoilRoot } from \"recoil\";\nimport { createGlobalStyle, ThemeProvider } from \"styled-components\";\nimport App from \"./App\";\nimport { theme } from \"./theme\";\n\nconst queryClient = new QueryClient();\n\nconst GlobalStyle = createGlobalStyle`\n@import url('https://fonts.googleapis.com/css2?family=Source+Sans+Pro:wght@300;400&display=swap');\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed, \nfigure, figcaption, footer, header, hgroup, \nmenu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n\tmargin: 0;\n\tpadding: 0;\n\tborder: 0;\n\tfont-size: 100%;\n\tfont: inherit;\n\tvertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure, \nfooter, header, hgroup, menu, nav, section {\n\tdisplay: block;\n}\nbody {\n\tline-height: 1;\n}\nol, ul {\n\tlist-style: none;\n}\nblockquote, q {\n\tquotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n\tcontent: '';\n\tcontent: none;\n}\ntable {\n\tborder-collapse: collapse;\n\tborder-spacing: 0;\n}\n*{\n  box-sizing: border-box;\n}\na{\n  text-decoration: none;\n  color:inherit;\n}\n\nbody{\n  font-family: 'Source Sans Pro', sans-serif;\n  background-color: ${(props) => props.theme.bgColor};\n  color: black;\n}\n`;\n\nReactDOM.render(\n  <React.StrictMode>\n    <RecoilRoot>\n      <QueryClientProvider client={queryClient}>\n        <ThemeProvider theme={theme}>\n          <GlobalStyle />\n          <App />\n        </ThemeProvider>\n      </QueryClientProvider>\n    </RecoilRoot>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n","import { DefaultTheme } from \"styled-components\";\n\nexport const theme: DefaultTheme = {\n  bgColor: \"#3F8CF2\",\n  boardColor: \"#DADFE9\",\n  cardColor: \"white\",\n};\n"],"sourceRoot":""}